//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2013.11.23 at 01:41:44 AM CET 
//

package de.minecrawler.IR1.data;

import java.math.BigInteger;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.XmlAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;

@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {"date", "mknote", "topics", "places", "people", "orgs", "exchanges", "companies", "unknown", "text"})
@XmlRootElement(name = "REUTERS")
public class Document {

    @XmlElement(name = "DATE", required = true)
    @XmlJavaTypeAdapter(DateAdapter.class)
    protected Date date;

    @XmlElement(name = "MKNOTE")
    protected String mknote;

    @XmlElement(name = "TOPICS", required = true)
    protected DList topics;

    @XmlElement(name = "PLACES", required = true)
    protected DList places;

    @XmlElement(name = "PEOPLE", required = true)
    protected DList people;

    @XmlElement(name = "ORGS", required = true)
    protected DList orgs;

    @XmlElement(name = "EXCHANGES", required = true)
    protected DList exchanges;

    @XmlElement(name = "COMPANIES", required = true)
    protected DList companies;

    @XmlElement(name = "UNKNOWN", required = true)
    protected String unknown;

    @XmlElement(name = "TEXT", required = true)
    protected Text text;

    @XmlAttribute(name = "CGISPLIT", required = true)
    @XmlSchemaType(name = "NCName")
    protected String cgisplit;

    @XmlAttribute(name = "CSECS")
    protected BigInteger csecs;

    @XmlAttribute(name = "LEWISSPLIT", required = true)
    @XmlSchemaType(name = "NCName")
    protected String lewissplit;

    @XmlAttribute(name = "NEWID", required = true)
    protected BigInteger newid;

    @XmlAttribute(name = "OLDID", required = true)
    protected BigInteger oldid;

    @XmlAttribute(name = "TOPICS", required = true)
    @XmlJavaTypeAdapter(HasTopicsAdapter.class)
    @XmlSchemaType(name = "NCName")
    protected Boolean hastopics;

    public Date getDate() {
        return date;
    }

    public String getMknote() {
        return mknote;
    }

    public List<String> getTopics() {
        return topics.getValue();
    }

    public List<String> getPlaces() {
        return places.getValue();
    }

    public List<String> getPeople() {
        return people.getValue();
    }

    public List<String> getOrgs() {
        return orgs.getValue();
    }

    public List<String> getExchanges() {
        return exchanges.getValue();
    }

    public List<String> getCompanies() {
        return companies.getValue();
    }

    public String getUnknown() {
        return unknown;
    }

    public Text getText() {
        return text;
    }

    public String getCgisplit() {
        return cgisplit;
    }

    public BigInteger getCsecs() {
        return csecs;
    }

    public String getLewissplit() {
        return lewissplit;
    }

    public BigInteger getNewid() {
        return newid;
    }

    public BigInteger getOldid() {
        return oldid;
    }

    public Boolean hasTopics() {
        return hastopics;
    }

    private static class DateAdapter extends XmlAdapter<String, Date> {

        private static SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MMM-yyyy HH:mm:ss.SS");

        @Override
        public String marshal(Date v) throws Exception {
            return dateFormat.format(v);
        }

        @Override
        public Date unmarshal(String v) throws Exception {
            return dateFormat.parse(v);
        }
    }

    private static class HasTopicsAdapter extends XmlAdapter<String, Boolean> {

        @Override
        public String marshal(Boolean v) throws Exception {
            return v ? "YES" : "NO";
        }

        @Override
        public Boolean unmarshal(String s) throws Exception {
            return s.equals("YES");
        }
    }

    private static class DList {

        @XmlElement(name = "D")
        private List<String> value;

        public List<String> getValue() {
            return value;
        }

        @Override
        public String toString() {
            return value.toString();
        }
    }

}
